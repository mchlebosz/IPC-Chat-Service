@startuml loginProtocol
!theme vibrant from https://raw.githubusercontent.com/plantuml/plantuml/master/themes

actor Bob as User order 1
database ClientDB as ClientDB order 2
database ServerDB as ServerDB order 30

autonumber

== Server Initialization ==
' Server initialization
create Server order 25
ServerDB <->o Server : load_db()
activate Server
create queue ServerQueue order 24
Server ->o ServerQueue : msgget('server', IPC_CREAT)
activate ServerQueue

== Client Initialization ==
' Client initialization
create Client order 3
User -> Client : login(login,password)
activate Client
create queue ClientQueue order 4
Client -> ClientQueue : msgget(client_key, IPC_CREAT)
activate ClientQueue
Client -> ServerQueue : msgget('server')
alt Failure connection to server
    loop 10 times
        Client -> ServerQueue : msgget('server')
    end
    alt Failure
        Client -> User : "Server is not responding"
        'exit app
    else Sucessfull connection to server
        Client --> ServerQueue : msgsnd(client_key)
    end
else Sucessfull connection to server
    Client --> ServerQueue : msgsnd(client_key)
end


== Server Session ==
' Server receives client key and creates session
group Create session
    ServerQueue --> Server : msgrcv(client_key)
    create queue SessionQueue order 20
    Server -> SessionQueue : msgget(session_key, IPC_CREAT)
    activate SessionQueue
    create Session order 21
    Server -> Session : fork()
    activate Session
    Session -> SessionQueue : msgget(session_key)
    Session -> ClientQueue : msgget(client_key)
    Session --> ClientQueue : msgsnd(session_key)
end
' Client receives session key and starts session and removes client queue
ClientQueue --> Client : msgrcv(session_key)
Client -> SessionQueue : msgget(session_key)
alt Failure connection to session
    loop 10 times
        Client -> SessionQueue : msgget(session_key)
    end
    alt Failure
        Client -> User : "Server is not responding"
        'exit app
    end
else Sucessfull connection to session
    Client -> ClientQueue : msgctl(client_key, IPC_RMID)
    destroy ClientQueue


    Client --> SessionQueue : msgsnd({login,password})
    SessionQueue --> Session : msgrcv({login,password})

    ' if everything is ok then change access rights and send to server
    Session --> ServerQueue : msgsnd({login,password})
    ServerQueue --> Server : msgrcv({login,password})
    Server -> ServerDB : check_login({login,password})
    ' if everything is ok then sent to session, if fail then send info
    alt Failure login
        Server -> Server : set_status(login,'offline')
        Server -> SessionQueue : msgsnd(fail, message)
        SessionQueue --> Session : msgrcv(fail, message)
        'change permissions
        Session -> Session : change msg access rights()
        Session -> SessionQueue : msgsnd(fail, message)
        SessionQueue --> Client : msgrcv(fail, message)
        Client -> User : show_message(message)
        'retry login
    else Sucessfull login
        Server -> Server : connect(login,session_key)
        Server -> Server : set_status(login,'online')
        Server --> SessionQueue : msgsnd({login,password}, decrypt_key)
        SessionQueue --> Session : msgrcv({login,password}, decrypt_key)

        'if everything is ok then change access rights and send to client
        Session -> Session : change msg access rights()
        Session --> SessionQueue : msgsnd({login,password}, decrypt_key)
        SessionQueue --> Client : msgrcv({login,password}, decrypt_key)
        Client -> Client : check_credentials({login,password}, decrypt_key)
        alt Failure credentials
            Client -> User : show_message(internal_error)
            'retry login
        else Sucessfull credentials
            Client -> Client : change_access_rights()
            Client <- ClientDB : load_data(login,decrypt_key)
            Client -> Client : start_chat()
            Client -> User : show_chat()
        end
    end
end









@enduml
